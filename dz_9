import "hardhat/console.sol";
pragma solidity >0.8.2;


library StringComparer{
    function compare(string memory str1, string memory str2) public pure returns (bool) {
        return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));
    }
}

abstract contract Animal{
    string name;

    constructor(string memory _name){
        name = _name;
    }

    function eat(string calldata _food) virtual view public returns(string memory){
        return "Animals eats";
    }

    function sleep() view public returns(string memory){
        return "Z-z-z-z-z-z-z";
    }

    function speak() virtual view public returns (string memory){
        return "Animal speaks";
    }
}

abstract contract Herbivore is Animal{

    string canEat = "plant";

    function eat(string calldata _food) override virtual view public returns(string memory){
        require(StringComparer.compare(_food,canEat),"Herbivore cannot eat this");
        return "Non-nom";
    }

}

abstract contract Carnivore is Animal{

    string canEat = "meat";

    function eat(string calldata _food) override virtual view public returns(string memory){
        require(StringComparer.compare(_food,canEat),"Carnivore cannot eat this");
        return "Non-nom";
    }

}

contract Wolf is Carnivore{
    
    constructor(string memory _name) Animal(_name){

    }

     function eat(string calldata _food) view override public  returns(string memory){

        if(StringComparer.compare(_food,"meat")){
            return "Wolf eats";
        }
        revert("Wolf cannot eat this");
    }


    function speak() override view public returns (string memory){
        return "Awwwooooo";
    }
}

contract Horse is Herbivore{

    
    constructor(string memory _name) Animal(_name){

    }

    function speak() override view public returns (string memory){
        return "Igogo";
    }
}



contract Cow is Herbivore{

    constructor(string memory _name) Animal(_name){

    }

    function speak() override view public returns (string memory){
        return "Moooo";
    }
}



contract Dog is Animal{
    
    constructor(string memory _name) Animal(_name){

    }

    function eat(string calldata _food) view override public  returns(string memory){

        require(!StringComparer.compare(_food,"chocolate"),"Dogs cannot eat chocolate!");

        if(StringComparer.compare(_food,"meat") || StringComparer.compare(_food,"plant")){
            return "Dog eats";
        }
        revert("Dog cannot eat this");
    }

    function speak() override view public returns (string memory){
        return "Woof";
    }
}
